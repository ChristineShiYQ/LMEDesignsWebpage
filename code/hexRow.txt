import java.lang.reflect.*;

class cParams
{
  float ringRad = 200.0;  
  float ballRad = 5.0;  
  int numCells = 5;  
  int numRepeats = 9;
  float scale = 0.79;
  float reinforcementDepth = 50.0;
  float quadric = 0.5;
}
cLattice latticeMaker(cParams params)
{  
  float r = 5;
  float l = 100; // hex side
  float x = l*cos(PI/6); // hex x
  float y = l*sin(PI/6); // hex y
   
  // create lattice object
  cLattice structure = new cLattice();
  
  // design the ball cloud 
  cBallCloud bC = new cBallCloud();
  
  bC.addBall(0,-l,0,r); 
  bC.addBall(-x,-y,0,r);
  bC.addBall(-x,y,0,r);
  bC.addBall(0,l,0,r); 
  bC.addBall(x,y,0,r);
  bC.addBall(x,-y,0,r);
  
  // set ball color
  for(int i=0; i<bC.numBalls(); i++){bC.setBallColor(i,bronze);}
  
  // add ball cloud
  structure.addBallCloud(bC);
  
  // define intra-beams
  for(int i=0; i<bC.numBalls(); i++) structure.addIntraBeam(i,(i+1)%bC.numBalls()); // half hexagon
  
  // define inter-beams
  for(int i=0; i<bC.numBalls(); i++) structure.addInterBeam(i,i,0,0,1); // half hexagon

    // set beam color
  for(int i=0; i<structure.numBeamsInCloud(); i++){structure.setBeamColor(i,contrastingColors[gC++]);}
  
  // define transforms
  cTransform s1 = new cTransform(), s2 = new cTransform(), s3 = new cTransform();
  int n1=1, n2=1, n3=5;

  s3.translate(0,0,2.0*l);
  s3.scale(1.2);
  
  // applyTransform
  structure.addTransforms(s1,s2,s3,n1,n2,n3);
    
  // return the structure
  return structure;
}