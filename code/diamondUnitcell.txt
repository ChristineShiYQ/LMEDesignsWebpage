import java.lang.reflect.*;

class cParams
{
  float ringRad = 200.0;  
  float ballRad = 5.0;  
  int numCells = 5;  
  int numRepeats = 9;
  float scale = 0.79;
  float reinforcementDepth = 50.0; // 0.5*sqrt(3.0)*ringRad*2.0*PI/(3.0*numCells);
  float quadric = 0.5;
}
cLattice latticeMaker(cParams params)
{  
  float r = params.ballRad;
  float s = params.scale;
  float h = 32.0*r; // cube size
  
  // create lattice object
  cLattice structure = new cLattice();
  
  // design the ball cloud 
  cBallCloud bC = new cBallCloud();
  bC.addBall(0,0,0,r); //0
  bC.addBall(h,0,0,r); //1
  bC.addBall(h,0,h,r); //2  
  bC.addBall(0,0,h,r); //3
  
  bC.addBall(0,h,0,r); //4
  bC.addBall(0,h,h,r); //5
  
  bC.addBall(h,h,0,r); //6
  bC.addBall(h,h,h,r); //7
  
  bC.addBall(0.5*h,0,0.5*h,r); //8
  bC.addBall(0,0.5*h,0.5*h,r); //9
  bC.addBall(0.5*h,0.5*h,0,r); //10
  
  bC.addBall(0.5*h,h,0.5*h,r); //11
  bC.addBall(h,0.5*h,0.5*h,r); //12
  bC.addBall(0.5*h,0.5*h,h,r); //13
  
  bC.addBall(0.25*h,0.25*h,0.25*h,r); //14
  bC.addBall(0.75*h,0.25*h,0.75*h,r); //15
  bC.addBall(0.25*h,0.75*h,0.75*h,r); //16
  bC.addBall(0.75*h,0.75*h,0.25*h,r); //17

      
  // set ball color
  for(int i=0; i<bC.mBalls.size(); i++){bC.setBallColor(i,bronze);}
  
  // add ball cloud
  structure.addBallCloud(bC);
  
  // define beams
  structure.addIntraBeam(0,1); structure.addIntraBeam(1,2); structure.addIntraBeam(2,3); structure.addIntraBeam(3,0);
  structure.addIntraBeam(4,5); structure.addIntraBeam(5,7); structure.addIntraBeam(7,6); structure.addIntraBeam(6,4);  
  structure.addIntraBeam(0,4); structure.addIntraBeam(3,5); structure.addIntraBeam(2,7); structure.addIntraBeam(1,6);
  
  structure.addIntraBeam(14,0); structure.addIntraBeam(14,8); structure.addIntraBeam(14,9); structure.addIntraBeam(14,10);
  structure.addIntraBeam(15,2); structure.addIntraBeam(15,8); structure.addIntraBeam(15,12); structure.addIntraBeam(15,13);
  structure.addIntraBeam(16,5); structure.addIntraBeam(16,9); structure.addIntraBeam(16,11); structure.addIntraBeam(16,13);
  structure.addIntraBeam(17,6); structure.addIntraBeam(17,12); structure.addIntraBeam(17,11); structure.addIntraBeam(17,10);
  
  
 
  
  // set beam color
  for(int i=0; i<structure.numBeamsInCloud(); i++){structure.setBeamColor(i,contrastingColors[gC%contrastingColors.length]); gC++;}
  
  // define transforms
  cTransform s1 = new cTransform(), s2 = new cTransform(), s3 = new cTransform();
  int n1 = 5, n2=5, n3=10;
  
  s1.translate(h,0,0);
  s2.translate(0,h,0); 
  s3.translate(0,0,h);
  s3.scale(0.89);

  // apply transform
  structure.addTransforms(s1,s2,s3,n1,n2,n3);
  
  // return structure
  return structure;
}