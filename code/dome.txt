import java.lang.reflect.*;

class cParams
{
  float ringRad = 200.0;  
  float ballRad = 5.0;  
  int numCells = 5;  
  int numRepeats = 9;
  float scale = 0.79;
  float reinforcementDepth = 50.0;
  float quadric = 0.5;
}
cLattice latticeMaker(cParams params)
{  
  float r = 10;

  float a = 100;
  float b =100;
  float ang = radians(90/4.0*3.0);
  float y = a*sin(ang);
  float x = a*cos(ang); 
  float ang2 = radians(90/4.0);

  // create lattice object
  cLattice structure = new cLattice();
  
  // design the ball cloud 
  cBallCloud bC = new cBallCloud();
  int n = 4; // number of balls in a cell  

  bC.addBall(0,0,0,r); 
  // set ball color
  for(int i=0; i<bC.numBalls(); i++){bC.setBallColor(i,bronze);}
  
  // add ball cloud
  structure.addBallCloud(bC);
  
  // define intra-beams
  structure.addInterBeam(0,0,1,0,0);
  structure.addInterBeam(0,0,0,1,0);

  
  // set beam color
  for(int i=0; i<structure.numBeamsInCloud(); i++){structure.setBeamColor(i,contrastingColors[gC++]);}
  
  // define transforms
  cTransform s1 = new cTransform(), s2 = new cTransform(), s3 = new cTransform();
  float s = 1.2;
  int n1=10, n2=16, n3=1;
  s1.translate(0,-a,0);
  s1.scale(s);
  s1.rotate(ang2/4, V(1.0,0,0));
  s2.rotate(ang2, V(0,0,1));
  structure.closeDirection2();
  // applyTransform
  structure.addTransforms(s1,s2,s3,n1,n2,n3);

  
  // return the structure
  return structure;
}